from __future__ import annotations
from ACO_PTP import *
import time
import numpy as np

# Testa todas as combinações de parâmetro variando de 0.3 em 0.3 
def teste(graph, alpha, beta, gamma, delta):
    i = 0
    with open("resultados_testes_ulysses22.txt", "w") as file:
        for alpha in np.arange(0.3, 1, 0.3):
            ALPHA = alpha
            for beta in np.arange(0.3, 1, 0.3):
                BETA = beta
                for gamma in np.arange(0.3, 1, 0.3):
                    GAMMA = gamma
                    for delta in np.arange(0.3, 1, 0.3):
                        i += 1
                        DELTA = delta
                        start_time = time.time()
                        final_path, final_distance, final_bonus = ant_colony(graph)  # Supondo que você tenha a função ant_colony definida
                        end_time = time.time()

                        execution_time = end_time - start_time
                        
                        # Escreve os resultados no arquivo e força a atualização imediata
                        file.write("=================================================================\n")
                        file.write(f"Alpha: {ALPHA}, Beta: {BETA}, Gamma: {GAMMA}, Delta: {DELTA}\n")
                        file.write(f"Tempo de execucao: {execution_time:.4f} segundos\n")
                        file.write(f"Final Path: {final_path}\nTotal Distance: {final_distance}\nTotal Bonus: {final_bonus}\nFinal profit: {final_bonus - final_distance}\n")
                        file.write(f"Iteracao: {i}\n\n")
                        file.write("==================================================================\n")
                        file.flush()  # Força a escrita no disco imediatamente


def main():
    # Definindo a matriz fornecida
    matrix = [[0, 518, 495, 326, 1037, 727, 639, 81, 1024, 711, 2280, 463, 444, 469, 624, 146, 346, 332, 639, 589, 584, 203],
    [518, 0, 131, 455, 1550, 1235, 1135, 547, 1455, 1125, 2771, 961, 949, 983, 1138, 567, 227, 477, 1077, 1027, 1021, 384],
    [495, 131, 0, 516, 1529, 1182, 1075, 541, 1365, 1035, 2699, 905, 899, 941, 1117, 510, 288, 538, 995, 947, 939, 410],
    [326, 455, 516, 0, 1189, 984, 918, 277, 1336, 1031, 2537, 749, 721, 722, 799, 466, 232, 22, 955, 905, 901, 155],
    [1037, 1550, 1529, 1189, 0, 479, 597, 1003, 873, 885, 1468, 693, 678, 615, 413, 1039, 1348, 1175, 821, 828, 835, 1180],
    [727, 1235, 1182, 984, 479, 0, 126, 729, 488, 409, 1558, 278, 286, 264, 299, 673, 1072, 977, 343, 352, 360, 915],
    [639, 1135, 1075, 918, 597, 126, 0, 651, 465, 307, 1642, 177, 199, 208, 344, 569, 984, 914, 229, 231, 238, 835],
    [81, 547, 541, 277, 1003, 729, 651, 0, 1059, 755, 2285, 478, 453, 466, 593, 219, 351, 279, 678, 628, 625, 188],
    [1024, 1455, 1365, 1336, 873, 488, 465, 1059, 0, 331, 1368, 600, 636, 667, 785, 912, 1352, 1335, 387, 438, 443, 1226],
    [711, 1125, 1035, 1031, 885, 409, 307, 755, 331, 0, 1683, 350, 390, 447, 642, 589, 1028, 1033, 93, 132, 134, 911],
    [2280, 2771, 2699, 2537, 1468, 1558, 1642, 2285, 1368, 1683, 0, 1818, 1836, 1821, 1762, 2205, 2625, 2529, 1709, 1755, 1762, 2472],
    [463, 961, 905, 749, 693, 278, 177, 478, 600, 350, 1818, 0, 41, 107, 340, 397, 808, 746, 258, 224, 226, 660],
    [444, 949, 899, 721, 678, 286, 199, 453, 636, 390, 1836, 41, 0, 73, 311, 390, 789, 717, 298, 264, 266, 637],
    [469, 983, 941, 722, 615, 264, 208, 466, 667, 447, 1821, 107, 73, 0, 238, 435, 811, 716, 355, 327, 329, 653],
    [624, 1138, 1117, 799, 413, 299, 344, 593, 785, 642, 1762, 340, 311, 238, 0, 633, 941, 787, 555, 540, 544, 773],
    [146, 567, 510, 466, 1039, 673, 569, 219, 912, 589, 2205, 397, 390, 435, 633, 0, 441, 474, 526, 475, 470, 329],
    [346, 227, 288, 232, 1348, 1072, 984, 351, 1352, 1028, 2625, 808, 789, 811, 941, 441, 0, 254, 966, 915, 910, 169],
    [332, 477, 538, 22, 1175, 977, 914, 279, 1335, 1033, 2529, 746, 717, 716, 787, 474, 254, 0, 956, 907, 903, 170],
    [639, 1077, 995, 955, 821, 343, 229, 678, 387, 93, 1709, 258, 298, 355, 555, 526, 966, 956, 0, 51, 57, 841],
    [589, 1027, 947, 905, 828, 352, 231, 628, 438, 132, 1755, 224, 264, 327, 540, 475, 915, 907, 51, 0, 9, 790],
    [584, 1021, 939, 901, 835, 360, 238, 625, 443, 134, 1762, 226, 266, 329, 544, 470, 910, 903, 57, 9, 0, 786],
    [203, 384, 410, 155, 1180, 915, 835, 188, 1226, 911, 2472, 660, 637, 653, 773, 329, 169, 170, 841, 790, 786, 0]]

    bonus = [2891, 347, 2678, 109, 2945, 2561, 789, 287, 2930, 1567, 2903, 1876, 2911, 289, 2990, 2356, 1234, 1987, 456, 2654, 2987, 150]
       
    global ALPHA, BETA, GAMMA, DELTA
    
    graph = create_graph_from_matrices(matrix, bonus)
    
    teste(graph, ALPHA, BETA, GAMMA, DELTA)

if __name__ == "__main__":
    main()